# -*- coding: utf-8 -*-
"""TTS_isready.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LnezGE2KhMyrKriC3AxWOfxKtDHpCBdf
"""

!pip install -U pip
!pip install TTS

!git clone https://github.com/coqui-ai/TTS.git

import torch

from tensorflow import keras

from google.colab import drive
drive.mount('/content/gdrive')

import os

from trainer import Trainer, TrainerArgs

from TTS.tts.configs.shared_configs import BaseDatasetConfig, CharactersConfig
from TTS.tts.configs.vits_config import VitsConfig
from TTS.tts.datasets import load_tts_samples
from TTS.tts.models.vits import Vits, VitsArgs, VitsAudioConfig
from TTS.tts.utils.speakers import SpeakerManager
from TTS.tts.utils.text.tokenizer import TTSTokenizer
from TTS.utils.audio import AudioProcessor

output_path = "/content/gdrive/MyDrive/TTS"


dataset_config = BaseDatasetConfig(
    formatter="ljspeech", meta_file_train="transcript.txt", path=os.path.join(output_path, "MyTTSDataSet/")
)

audio_config = VitsAudioConfig(
    sample_rate=44100, win_length=1024, hop_length=256, num_mels=80, mel_fmin=0, mel_fmax=None
)

character_config = CharactersConfig(
    characters_class= "TTS.tts.models.vits.VitsCharacters",
    characters= "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя1234567890",
    punctuations=" !,.?-",
    pad= "<PAD>",
    eos= "<EOS>",
    bos= "<BOS>",
    blank= "<BLNK>",
)

config = VitsConfig(
    audio=audio_config,
    characters=character_config,
    run_name="vits_vctk",
    batch_size=16,
    eval_batch_size=4,
    num_loader_workers=4,
    num_eval_loader_workers=4,
    run_eval=True,
    test_delay_epochs=0,
    epochs=500,
    text_cleaner="basic_cleaners",
    use_phonemes=False,
    phoneme_language="ru-ru",
    phoneme_cache_path=os.path.join(output_path, "phoneme_cache"),
    compute_input_seq_cache=True,
    print_step=25,
    print_eval=False,
    save_best_after=250,
    save_checkpoints=True,
    save_all_best=True,
    mixed_precision=True,
    max_text_len=250,
    output_path=output_path,
    datasets=[dataset_config],
    cudnn_benchmark=False,
    test_sentences=[
        ["Привет как дела"],
        ["Почему ты так долго шел до этого места."],
        ["Доброе утро сенпай"]
    ]
)

ap = AudioProcessor.init_from_config(config)

tokenizer, config = TTSTokenizer.init_from_config(config)

def formatter(root_path, manifest_file, **kwargs):
    """Assumes each line as ```<filename>|<transcription>```
    """
    txt_file = os.path.join(root_path, manifest_file)
    items = []
    speaker_name = "iris_like_nika"
    with open(txt_file, "r", encoding="utf-8") as ttf:
        for line in ttf:
            cols = line.split("|")
            wav_file = f"/content/gdrive/MyDrive/TTS/MyTTSDataSet/wavs/{cols[0]}.wav"
            text = cols[1]
            # print(text)
            items.append({"text":text, "audio_file":wav_file, "speaker_name":speaker_name, "root_path": root_path})
    return items

train_samples, eval_samples = load_tts_samples(
dataset_config,
eval_split=True,
formatter=formatter)

model = Vits(config, ap, tokenizer, speaker_manager=None)

trainer = Trainer(
    TrainerArgs(),
    config,
    output_path,
    model=model,
    train_samples=train_samples,
    eval_samples=eval_samples,
)

!pip install --upgrade numpy

!python /content/TTS/TTS/bin/train_tts.py --continue_path /content/gdrive/MyDrive/TTS/vits_vctk-January-14-2024_12+56PM-0000000

trainer.fit()

!tts --list_models

!tts --text "Привет" \
    --model_path /content/gdrive/MyDrive/TTS/vits_vctk-January-14-2024_12+56PM-0000000/best_model.pth \
    --config_path /content/gdrive/MyDrive/TTS/vits_vctk-January-14-2024_12+56PM-0000000/config.json \
    --out_path /content/output.wav